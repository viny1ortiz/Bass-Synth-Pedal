
BassSynthetizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b0  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005e0  080005e8  000015e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005e0  080005e0  000015e8  2**0
                  CONTENTS
  4 .ARM          00000000  080005e0  080005e0  000015e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005e0  080005e8  000015e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005e0  080005e0  000015e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005e4  080005e4  000015e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000000  080005e8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  080005e8  0000203c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000405  00000000  00000000  00001611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000012b  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00001b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005d  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000005e1  00000000  00000000  00001c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006f9  00000000  00000000  0000220e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004244  00000000  00000000  00002907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006b4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000160  00000000  00000000  00006b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00006cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080005c8 	.word	0x080005c8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080005c8 	.word	0x080005c8

08000170 <GPIO_Init_Input>:
#define FILTER_SIZE 8
volatile uint16_t frequency_buffer[FILTER_SIZE] = {0};
volatile uint8_t index = 0;
volatile uint16_t avg_frequency = 0;
// Initialize GPIO for Input Capture (TIM3 on PA6)
void GPIO_Init_Input() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= (1 << 2);  // Enable GPIOA clock
 8000174:	4b0a      	ldr	r3, [pc, #40]	@ (80001a0 <GPIO_Init_Input+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	@ (80001a0 <GPIO_Init_Input+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
    GPIOA->CRL &= ~(0xF << 24);  // Clear PA6 configuration
 8000180:	4b08      	ldr	r3, [pc, #32]	@ (80001a4 <GPIO_Init_Input+0x34>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a07      	ldr	r2, [pc, #28]	@ (80001a4 <GPIO_Init_Input+0x34>)
 8000186:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800018a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0x4 << 24);   // PA6 as input floating
 800018c:	4b05      	ldr	r3, [pc, #20]	@ (80001a4 <GPIO_Init_Input+0x34>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a04      	ldr	r2, [pc, #16]	@ (80001a4 <GPIO_Init_Input+0x34>)
 8000192:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000196:	6013      	str	r3, [r2, #0]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000
 80001a4:	40010800 	.word	0x40010800

080001a8 <TIM3_InputCapture_Init>:

// Initialize TIM3 for Input Capture on PA6
void TIM3_InputCapture_Init() {
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1 << 1);  // Enable TIM3 clock
 80001ac:	4b17      	ldr	r3, [pc, #92]	@ (800020c <TIM3_InputCapture_Init+0x64>)
 80001ae:	69db      	ldr	r3, [r3, #28]
 80001b0:	4a16      	ldr	r2, [pc, #88]	@ (800020c <TIM3_InputCapture_Init+0x64>)
 80001b2:	f043 0302 	orr.w	r3, r3, #2
 80001b6:	61d3      	str	r3, [r2, #28]

    TIM3->PSC = 10 - 1;  // 1 MHz timer clock
 80001b8:	4b15      	ldr	r3, [pc, #84]	@ (8000210 <TIM3_InputCapture_Init+0x68>)
 80001ba:	2209      	movs	r2, #9
 80001bc:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 0xFFFF;  // Max auto-reload value
 80001be:	4b14      	ldr	r3, [pc, #80]	@ (8000210 <TIM3_InputCapture_Init+0x68>)
 80001c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80001c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->CCMR1 |= (1 << 0);  // Capture input on TI1 (CC1S = 01)
 80001c6:	4b12      	ldr	r3, [pc, #72]	@ (8000210 <TIM3_InputCapture_Init+0x68>)
 80001c8:	699b      	ldr	r3, [r3, #24]
 80001ca:	4a11      	ldr	r2, [pc, #68]	@ (8000210 <TIM3_InputCapture_Init+0x68>)
 80001cc:	f043 0301 	orr.w	r3, r3, #1
 80001d0:	6193      	str	r3, [r2, #24]
    TIM3->CCER |= (1 << 0);   // Enable capture on CH1
 80001d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000210 <TIM3_InputCapture_Init+0x68>)
 80001d4:	6a1b      	ldr	r3, [r3, #32]
 80001d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000210 <TIM3_InputCapture_Init+0x68>)
 80001d8:	f043 0301 	orr.w	r3, r3, #1
 80001dc:	6213      	str	r3, [r2, #32]
    TIM3->DIER |= (1 << 1);   // Enable CC1 interrupt
 80001de:	4b0c      	ldr	r3, [pc, #48]	@ (8000210 <TIM3_InputCapture_Init+0x68>)
 80001e0:	68db      	ldr	r3, [r3, #12]
 80001e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000210 <TIM3_InputCapture_Init+0x68>)
 80001e4:	f043 0302 	orr.w	r3, r3, #2
 80001e8:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 |= (1 << 0);    // Enable TIM3 counter
 80001ea:	4b09      	ldr	r3, [pc, #36]	@ (8000210 <TIM3_InputCapture_Init+0x68>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a08      	ldr	r2, [pc, #32]	@ (8000210 <TIM3_InputCapture_Init+0x68>)
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	6013      	str	r3, [r2, #0]

    NVIC_EnableIRQ(TIM3_IRQn);  // Enable TIM3 interrupt
 80001f6:	4b07      	ldr	r3, [pc, #28]	@ (8000214 <TIM3_InputCapture_Init+0x6c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a06      	ldr	r2, [pc, #24]	@ (8000214 <TIM3_InputCapture_Init+0x6c>)
 80001fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000200:	6013      	str	r3, [r2, #0]
}
 8000202:	bf00      	nop
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	40021000 	.word	0x40021000
 8000210:	40000400 	.word	0x40000400
 8000214:	e000e100 	.word	0xe000e100

08000218 <GPIO_Init_Output>:

// Initialize GPIO for PWM Outputs
void GPIO_Init_Output() {
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= (1 << 2);  // Enable GPIOA clock
 800021c:	4b13      	ldr	r3, [pc, #76]	@ (800026c <GPIO_Init_Output+0x54>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	4a12      	ldr	r2, [pc, #72]	@ (800026c <GPIO_Init_Output+0x54>)
 8000222:	f043 0304 	orr.w	r3, r3, #4
 8000226:	6193      	str	r3, [r2, #24]
    GPIOA->CRL &= ~(0xFF << 0);  // Clear PA0 and PA1 configuration
 8000228:	4b11      	ldr	r3, [pc, #68]	@ (8000270 <GPIO_Init_Output+0x58>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a10      	ldr	r2, [pc, #64]	@ (8000270 <GPIO_Init_Output+0x58>)
 800022e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000232:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (0xB << 0);//   // PA0 and  as alternate function push-pull
 8000234:	4b0e      	ldr	r3, [pc, #56]	@ (8000270 <GPIO_Init_Output+0x58>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a0d      	ldr	r2, [pc, #52]	@ (8000270 <GPIO_Init_Output+0x58>)
 800023a:	f043 030b 	orr.w	r3, r3, #11
 800023e:	6013      	str	r3, [r2, #0]

    RCC->APB2ENR |= (1 << 3);//Enable GPIOB clock
 8000240:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <GPIO_Init_Output+0x54>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	4a09      	ldr	r2, [pc, #36]	@ (800026c <GPIO_Init_Output+0x54>)
 8000246:	f043 0308 	orr.w	r3, r3, #8
 800024a:	6193      	str	r3, [r2, #24]
    GPIOB->CRL &= ~(0xF << 24);  // Clear PB6 configuration
 800024c:	4b09      	ldr	r3, [pc, #36]	@ (8000274 <GPIO_Init_Output+0x5c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a08      	ldr	r2, [pc, #32]	@ (8000274 <GPIO_Init_Output+0x5c>)
 8000252:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000256:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (0xB << 24);   // Set PB6 to AF push-pull, 50 MHz output
 8000258:	4b06      	ldr	r3, [pc, #24]	@ (8000274 <GPIO_Init_Output+0x5c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a05      	ldr	r2, [pc, #20]	@ (8000274 <GPIO_Init_Output+0x5c>)
 800025e:	f043 6330 	orr.w	r3, r3, #184549376	@ 0xb000000
 8000262:	6013      	str	r3, [r2, #0]
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	40021000 	.word	0x40021000
 8000270:	40010800 	.word	0x40010800
 8000274:	40010c00 	.word	0x40010c00

08000278 <TIM2_PWM_Init>:

// Initialize TIM2 for 2x Frequency PWM (PA0)
void TIM2_PWM_Init() {
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1 << 0);  // Enable TIM2 clock
 800027c:	4b1b      	ldr	r3, [pc, #108]	@ (80002ec <TIM2_PWM_Init+0x74>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4a1a      	ldr	r2, [pc, #104]	@ (80002ec <TIM2_PWM_Init+0x74>)
 8000282:	f043 0301 	orr.w	r3, r3, #1
 8000286:	61d3      	str	r3, [r2, #28]
    TIM2->PSC =10 - 1;  // 1 MHz timer clock
 8000288:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800028c:	2209      	movs	r2, #9
 800028e:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 800 - 1;  // Default frequency
 8000290:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000294:	f240 321f 	movw	r2, #799	@ 0x31f
 8000298:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CCR1 = 400;  // 50% duty cycle
 800029a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800029e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80002a2:	635a      	str	r2, [r3, #52]	@ 0x34

    TIM2->CCMR1 |= (6 << 4);  // PWM mode 1 on CH1
 80002a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80002b2:	6193      	str	r3, [r2, #24]
    TIM2->CCER |= (1 << 0);   // Enable CH1 output
 80002b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b8:	6a1b      	ldr	r3, [r3, #32]
 80002ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6213      	str	r3, [r2, #32]
    TIM2->CR1 |= (1 << 0);    // Enable TIM2 counter
 80002c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6013      	str	r3, [r2, #0]
    TIM2->CR1 |= (1<<7);
 80002d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002e2:	6013      	str	r3, [r2, #0]
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	40021000 	.word	0x40021000

080002f0 <TIM4_PWM_Init>:

// Initialize TIM4 for 4x Frequency PWM (PA1)
void TIM4_PWM_Init() {
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1 << 2);  // Enable TIM4 clock
 80002f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000360 <TIM4_PWM_Init+0x70>)
 80002f6:	69db      	ldr	r3, [r3, #28]
 80002f8:	4a19      	ldr	r2, [pc, #100]	@ (8000360 <TIM4_PWM_Init+0x70>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	61d3      	str	r3, [r2, #28]
    TIM4->PSC = 10 - 1;  // 1 MHz timer clock
 8000300:	4b18      	ldr	r3, [pc, #96]	@ (8000364 <TIM4_PWM_Init+0x74>)
 8000302:	2209      	movs	r2, #9
 8000304:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM4->ARR = 400 - 1;  // Default frequency
 8000306:	4b17      	ldr	r3, [pc, #92]	@ (8000364 <TIM4_PWM_Init+0x74>)
 8000308:	f240 128f 	movw	r2, #399	@ 0x18f
 800030c:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM4->CCR1 = (TIM4->ARR + 1)/2;  // 50% duty cycle
 800030e:	4b15      	ldr	r3, [pc, #84]	@ (8000364 <TIM4_PWM_Init+0x74>)
 8000310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000312:	3301      	adds	r3, #1
 8000314:	4a13      	ldr	r2, [pc, #76]	@ (8000364 <TIM4_PWM_Init+0x74>)
 8000316:	085b      	lsrs	r3, r3, #1
 8000318:	6353      	str	r3, [r2, #52]	@ 0x34

    TIM4->CCMR1 &= ~(0xFF << 0);
 800031a:	4b12      	ldr	r3, [pc, #72]	@ (8000364 <TIM4_PWM_Init+0x74>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a11      	ldr	r2, [pc, #68]	@ (8000364 <TIM4_PWM_Init+0x74>)
 8000320:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000324:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1 |= (6 << 4);  // PWM mode 1 on CH1
 8000326:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <TIM4_PWM_Init+0x74>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a0e      	ldr	r2, [pc, #56]	@ (8000364 <TIM4_PWM_Init+0x74>)
 800032c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000330:	6193      	str	r3, [r2, #24]
    TIM4->CCER |= (1 << 0);   // Enable CH1 output
 8000332:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <TIM4_PWM_Init+0x74>)
 8000334:	6a1b      	ldr	r3, [r3, #32]
 8000336:	4a0b      	ldr	r2, [pc, #44]	@ (8000364 <TIM4_PWM_Init+0x74>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6213      	str	r3, [r2, #32]
    TIM4->CR1 |=(1<<7);
 800033e:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <TIM4_PWM_Init+0x74>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a08      	ldr	r2, [pc, #32]	@ (8000364 <TIM4_PWM_Init+0x74>)
 8000344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000348:	6013      	str	r3, [r2, #0]
    TIM4->CR1 |= (1 << 0);    // Enable TIM4 counter
 800034a:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <TIM4_PWM_Init+0x74>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a05      	ldr	r2, [pc, #20]	@ (8000364 <TIM4_PWM_Init+0x74>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6013      	str	r3, [r2, #0]
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40021000 	.word	0x40021000
 8000364:	40000800 	.word	0x40000800

08000368 <TIM3_IRQHandler>:

// TIM3 Interrupt Handler for Frequency Measurement
void TIM3_IRQHandler() {
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
    if (TIM3->SR & (1 << 1)) {  // Check for capture flag
 800036c:	4b16      	ldr	r3, [pc, #88]	@ (80003c8 <TIM3_IRQHandler+0x60>)
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	f003 0302 	and.w	r3, r3, #2
 8000374:	2b00      	cmp	r3, #0
 8000376:	d022      	beq.n	80003be <TIM3_IRQHandler+0x56>
        TIM3->SR &= ~(1 << 1);  // Clear flag
 8000378:	4b13      	ldr	r3, [pc, #76]	@ (80003c8 <TIM3_IRQHandler+0x60>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	4a12      	ldr	r2, [pc, #72]	@ (80003c8 <TIM3_IRQHandler+0x60>)
 800037e:	f023 0302 	bic.w	r3, r3, #2
 8000382:	6113      	str	r3, [r2, #16]
        value2 = TIM3->CCR1;
 8000384:	4b10      	ldr	r3, [pc, #64]	@ (80003c8 <TIM3_IRQHandler+0x60>)
 8000386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000388:	4a10      	ldr	r2, [pc, #64]	@ (80003cc <TIM3_IRQHandler+0x64>)
 800038a:	6013      	str	r3, [r2, #0]

        if (value2 > value1) {
 800038c:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <TIM3_IRQHandler+0x64>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <TIM3_IRQHandler+0x68>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	429a      	cmp	r2, r3
 8000396:	d90b      	bls.n	80003b0 <TIM3_IRQHandler+0x48>
            frequency = 1000000 / (value2 - value1);  // Calculate frequency
 8000398:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <TIM3_IRQHandler+0x64>)
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <TIM3_IRQHandler+0x68>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	1ad3      	subs	r3, r2, r3
 80003a2:	4a0c      	ldr	r2, [pc, #48]	@ (80003d4 <TIM3_IRQHandler+0x6c>)
 80003a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a8:	b29a      	uxth	r2, r3
 80003aa:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <TIM3_IRQHandler+0x70>)
 80003ac:	801a      	strh	r2, [r3, #0]
 80003ae:	e002      	b.n	80003b6 <TIM3_IRQHandler+0x4e>
        } else {
            frequency = 0;  // Handle timer overflow
 80003b0:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <TIM3_IRQHandler+0x70>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	801a      	strh	r2, [r3, #0]
        }

        value1 = value2;  // Update last capture value
 80003b6:	4b05      	ldr	r3, [pc, #20]	@ (80003cc <TIM3_IRQHandler+0x64>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a05      	ldr	r2, [pc, #20]	@ (80003d0 <TIM3_IRQHandler+0x68>)
 80003bc:	6013      	str	r3, [r2, #0]
    }
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40000400 	.word	0x40000400
 80003cc:	20000024 	.word	0x20000024
 80003d0:	20000020 	.word	0x20000020
 80003d4:	000f4240 	.word	0x000f4240
 80003d8:	2000001c 	.word	0x2000001c

080003dc <Update_PWM_Frequencies>:

// Update PWM Frequencies
void Update_PWM_Frequencies() {
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0

	// Store frequency in buffer for averaging
	        frequency_buffer[index] = frequency;
 80003e2:	4b31      	ldr	r3, [pc, #196]	@ (80004a8 <Update_PWM_Frequencies+0xcc>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	461a      	mov	r2, r3
 80003ea:	4b30      	ldr	r3, [pc, #192]	@ (80004ac <Update_PWM_Frequencies+0xd0>)
 80003ec:	881b      	ldrh	r3, [r3, #0]
 80003ee:	b299      	uxth	r1, r3
 80003f0:	4b2f      	ldr	r3, [pc, #188]	@ (80004b0 <Update_PWM_Frequencies+0xd4>)
 80003f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	        index = (index + 1) % FILTER_SIZE;
 80003f6:	4b2c      	ldr	r3, [pc, #176]	@ (80004a8 <Update_PWM_Frequencies+0xcc>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	3301      	adds	r3, #1
 80003fe:	425a      	negs	r2, r3
 8000400:	f003 0307 	and.w	r3, r3, #7
 8000404:	f002 0207 	and.w	r2, r2, #7
 8000408:	bf58      	it	pl
 800040a:	4253      	negpl	r3, r2
 800040c:	b2da      	uxtb	r2, r3
 800040e:	4b26      	ldr	r3, [pc, #152]	@ (80004a8 <Update_PWM_Frequencies+0xcc>)
 8000410:	701a      	strb	r2, [r3, #0]

	        // Compute the average frequency
	        uint32_t sum = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	607b      	str	r3, [r7, #4]
	        for (uint8_t i = 0; i < FILTER_SIZE; i++) {
 8000416:	2300      	movs	r3, #0
 8000418:	70fb      	strb	r3, [r7, #3]
 800041a:	e00b      	b.n	8000434 <Update_PWM_Frequencies+0x58>
	            sum += frequency_buffer[i];
 800041c:	78fb      	ldrb	r3, [r7, #3]
 800041e:	4a24      	ldr	r2, [pc, #144]	@ (80004b0 <Update_PWM_Frequencies+0xd4>)
 8000420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000424:	b29b      	uxth	r3, r3
 8000426:	461a      	mov	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4413      	add	r3, r2
 800042c:	607b      	str	r3, [r7, #4]
	        for (uint8_t i = 0; i < FILTER_SIZE; i++) {
 800042e:	78fb      	ldrb	r3, [r7, #3]
 8000430:	3301      	adds	r3, #1
 8000432:	70fb      	strb	r3, [r7, #3]
 8000434:	78fb      	ldrb	r3, [r7, #3]
 8000436:	2b07      	cmp	r3, #7
 8000438:	d9f0      	bls.n	800041c <Update_PWM_Frequencies+0x40>
	        }
	        avg_frequency = sum / FILTER_SIZE;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	08db      	lsrs	r3, r3, #3
 800043e:	b29a      	uxth	r2, r3
 8000440:	4b1c      	ldr	r3, [pc, #112]	@ (80004b4 <Update_PWM_Frequencies+0xd8>)
 8000442:	801a      	strh	r2, [r3, #0]

    if (frequency > 20) {
 8000444:	4b19      	ldr	r3, [pc, #100]	@ (80004ac <Update_PWM_Frequencies+0xd0>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	b29b      	uxth	r3, r3
 800044a:	2b14      	cmp	r3, #20
 800044c:	d923      	bls.n	8000496 <Update_PWM_Frequencies+0xba>
        TIM2->ARR = (1000000 / ( 2*avg_frequency)) - 1;
 800044e:	4b19      	ldr	r3, [pc, #100]	@ (80004b4 <Update_PWM_Frequencies+0xd8>)
 8000450:	881b      	ldrh	r3, [r3, #0]
 8000452:	b29b      	uxth	r3, r3
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	4a18      	ldr	r2, [pc, #96]	@ (80004b8 <Update_PWM_Frequencies+0xdc>)
 8000458:	fb92 f3f3 	sdiv	r3, r2, r3
 800045c:	1e5a      	subs	r2, r3, #1
 800045e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000462:	62da      	str	r2, [r3, #44]	@ 0x2c
        TIM2->CCR1 = (TIM2->ARR + 1) / 2;
 8000464:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800046a:	3301      	adds	r3, #1
 800046c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000470:	085b      	lsrs	r3, r3, #1
 8000472:	6353      	str	r3, [r2, #52]	@ 0x34

        TIM4->ARR = (1000000 / (4 * avg_frequency
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <Update_PWM_Frequencies+0xd8>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	b29b      	uxth	r3, r3
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	4a0e      	ldr	r2, [pc, #56]	@ (80004b8 <Update_PWM_Frequencies+0xdc>)
 800047e:	fb92 f3f3 	sdiv	r3, r2, r3
        		)) - 1;
 8000482:	1e5a      	subs	r2, r3, #1
        TIM4->ARR = (1000000 / (4 * avg_frequency
 8000484:	4b0d      	ldr	r3, [pc, #52]	@ (80004bc <Update_PWM_Frequencies+0xe0>)
 8000486:	62da      	str	r2, [r3, #44]	@ 0x2c
        TIM4->CCR1 = (TIM4->ARR + 1) / 2;
 8000488:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <Update_PWM_Frequencies+0xe0>)
 800048a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800048c:	3301      	adds	r3, #1
 800048e:	4a0b      	ldr	r2, [pc, #44]	@ (80004bc <Update_PWM_Frequencies+0xe0>)
 8000490:	085b      	lsrs	r3, r3, #1
 8000492:	6353      	str	r3, [r2, #52]	@ 0x34
    }else{
    	frequency=0;
    }
}
 8000494:	e002      	b.n	800049c <Update_PWM_Frequencies+0xc0>
    	frequency=0;
 8000496:	4b05      	ldr	r3, [pc, #20]	@ (80004ac <Update_PWM_Frequencies+0xd0>)
 8000498:	2200      	movs	r2, #0
 800049a:	801a      	strh	r2, [r3, #0]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	20000038 	.word	0x20000038
 80004ac:	2000001c 	.word	0x2000001c
 80004b0:	20000028 	.word	0x20000028
 80004b4:	2000003a 	.word	0x2000003a
 80004b8:	000f4240 	.word	0x000f4240
 80004bc:	40000800 	.word	0x40000800

080004c0 <RCC_Init>:
void RCC_Init() {
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
    // Enable HSE (High-Speed External oscillator)
    RCC->CR |= (1<<16);//RCC_CR_HSEON;  // Turn on HSE oscillator
 80004c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <RCC_Init+0x44>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000504 <RCC_Init+0x44>)
 80004ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004ce:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & (1<<17)) == 0);  // Wait for HSE to be ready
 80004d0:	bf00      	nop
 80004d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000504 <RCC_Init+0x44>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0f9      	beq.n	80004d2 <RCC_Init+0x12>

    // Select HSE as the system clock
    RCC->CFGR |= (1 << 0);  // Set SW[1:0] bits to 01 (HSE as system clock)
 80004de:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <RCC_Init+0x44>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	4a08      	ldr	r2, [pc, #32]	@ (8000504 <RCC_Init+0x44>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6053      	str	r3, [r2, #4]
      while ((RCC->CFGR & (3 << 2)) != (1 << 2));  // Wait until SWS[1:0] bits indicate HSE (01)
 80004ea:	bf00      	nop
 80004ec:	4b05      	ldr	r3, [pc, #20]	@ (8000504 <RCC_Init+0x44>)
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	f003 030c 	and.w	r3, r3, #12
 80004f4:	2b04      	cmp	r3, #4
 80004f6:	d1f9      	bne.n	80004ec <RCC_Init+0x2c>
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000

08000508 <main>:
int main(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	RCC_Init();
 800050c:	f7ff ffd8 	bl	80004c0 <RCC_Init>
    GPIO_Init_Input();
 8000510:	f7ff fe2e 	bl	8000170 <GPIO_Init_Input>
    TIM3_InputCapture_Init();
 8000514:	f7ff fe48 	bl	80001a8 <TIM3_InputCapture_Init>
    GPIO_Init_Output();
 8000518:	f7ff fe7e 	bl	8000218 <GPIO_Init_Output>
    TIM2_PWM_Init();
 800051c:	f7ff feac 	bl	8000278 <TIM2_PWM_Init>
    TIM4_PWM_Init();
 8000520:	f7ff fee6 	bl	80002f0 <TIM4_PWM_Init>

    while (1) {
        Update_PWM_Frequencies();
 8000524:	f7ff ff5a 	bl	80003dc <Update_PWM_Frequencies>
 8000528:	e7fc      	b.n	8000524 <main+0x1c>
	...

0800052c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800052c:	480d      	ldr	r0, [pc, #52]	@ (8000564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000530:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480c      	ldr	r0, [pc, #48]	@ (8000568 <LoopForever+0x6>)
  ldr r1, =_edata
 8000536:	490d      	ldr	r1, [pc, #52]	@ (800056c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000538:	4a0d      	ldr	r2, [pc, #52]	@ (8000570 <LoopForever+0xe>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a0a      	ldr	r2, [pc, #40]	@ (8000574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800054c:	4c0a      	ldr	r4, [pc, #40]	@ (8000578 <LoopForever+0x16>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800055a:	f000 f811 	bl	8000580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055e:	f7ff ffd3 	bl	8000508 <main>

08000562 <LoopForever>:

LoopForever:
  b LoopForever
 8000562:	e7fe      	b.n	8000562 <LoopForever>
  ldr   r0, =_estack
 8000564:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800056c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000570:	080005e8 	.word	0x080005e8
  ldr r2, =_sbss
 8000574:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000578:	2000003c 	.word	0x2000003c

0800057c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800057c:	e7fe      	b.n	800057c <ADC1_2_IRQHandler>
	...

08000580 <__libc_init_array>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	2600      	movs	r6, #0
 8000584:	4d0c      	ldr	r5, [pc, #48]	@ (80005b8 <__libc_init_array+0x38>)
 8000586:	4c0d      	ldr	r4, [pc, #52]	@ (80005bc <__libc_init_array+0x3c>)
 8000588:	1b64      	subs	r4, r4, r5
 800058a:	10a4      	asrs	r4, r4, #2
 800058c:	42a6      	cmp	r6, r4
 800058e:	d109      	bne.n	80005a4 <__libc_init_array+0x24>
 8000590:	f000 f81a 	bl	80005c8 <_init>
 8000594:	2600      	movs	r6, #0
 8000596:	4d0a      	ldr	r5, [pc, #40]	@ (80005c0 <__libc_init_array+0x40>)
 8000598:	4c0a      	ldr	r4, [pc, #40]	@ (80005c4 <__libc_init_array+0x44>)
 800059a:	1b64      	subs	r4, r4, r5
 800059c:	10a4      	asrs	r4, r4, #2
 800059e:	42a6      	cmp	r6, r4
 80005a0:	d105      	bne.n	80005ae <__libc_init_array+0x2e>
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a8:	4798      	blx	r3
 80005aa:	3601      	adds	r6, #1
 80005ac:	e7ee      	b.n	800058c <__libc_init_array+0xc>
 80005ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b2:	4798      	blx	r3
 80005b4:	3601      	adds	r6, #1
 80005b6:	e7f2      	b.n	800059e <__libc_init_array+0x1e>
 80005b8:	080005e0 	.word	0x080005e0
 80005bc:	080005e0 	.word	0x080005e0
 80005c0:	080005e0 	.word	0x080005e0
 80005c4:	080005e4 	.word	0x080005e4

080005c8 <_init>:
 80005c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ca:	bf00      	nop
 80005cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ce:	bc08      	pop	{r3}
 80005d0:	469e      	mov	lr, r3
 80005d2:	4770      	bx	lr

080005d4 <_fini>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	bf00      	nop
 80005d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005da:	bc08      	pop	{r3}
 80005dc:	469e      	mov	lr, r3
 80005de:	4770      	bx	lr
